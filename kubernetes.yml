# Copyright 2020 Anthony Bonta
apiVersion: v1
kind: Namespace
metadata:
  name: zthunworks

---
apiVersion: v1
kind: Secret
metadata:
  name: zthunworks-secrets-db-urls
  namespace: zthunworks
type: Opaque
stringData:
  database-vault-url: ${database-vault-url}
  database-users-url: ${database-users-url}

---
apiVersion: v1
kind: Service
metadata:
  name: zthunworks-services-client
  namespace: zthunworks
spec:
  type: ClusterIP
  selector:
    app: zthunworks-pods-client
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: zthunworks-deployments-client
  namespace: zthunworks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zthunworks-pods-client
  template:
    metadata:
      name: zthunworks-pods-client
      labels:
        app: zthunworks-pods-client
        version: ${zthunworks-version}
    spec:
      containers:
        - name: zthunworks-pods-client
          image: zthun/works.client:${zthunworks-version}
          ports:
            - containerPort: 443
              hostPort: 443
            - containerPort: 80
              hostPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: zthunworks-services-server
  namespace: zthunworks
spec:
  type: ClusterIP
  selector:
    app: zthunworks-pods-server
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: zthunworks-deployments-server
  namespace: zthunworks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zthunworks-pods-server
  template:
    metadata:
      name: zthunworks-pods-server
      labels:
        app: zthunworks-pods-server
        version: ${zthunworks-version}
    spec:
      containers:
        - name: zthunworks-pods-server
          image: zthun/works.server:${zthunworks-version}
          ports:
            - containerPort: 3000
          env:
            - name: DATABASE_VAULT_URL
              valueFrom:
                secretKeyRef:
                  name: zthunworks-secrets-db-urls
                  key: database-vault-url
            - name: DATABASE_USERS_URL
              valueFrom:
                secretKeyRef:
                  name: zthunworks-secrets-db-urls
                  key: database-users-url

---
# Prerequisites
# This requires cert-manager in order to issue the acme challenge
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: zthunworks-cert-issuer
  namespace: zthunworks
spec:
  acme:
    email: ${certificate-email-address}
    privateKeySecretRef:
      name: zthunworks-cert-issuer
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
      - http01:
          ingress:
            class: nginx

---
# Prerequisites
# This is setup for the nginx-ingress controller.
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: zthunworks-ingress
  namespace: zthunworks
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    cert-manager.io/issuer: 'zthunworks-cert-issuer'
spec:
  tls:
    - hosts:
        - zthunworks.com
      secretName: zthunworks-tls
  rules:
    - host: zthunworks.com
      http:
        paths:
          - path: /
            backend:
              serviceName: zthunworks-services-client
              servicePort: 80
          - path: /api
            backend:
              serviceName: zthunworks-services-server
              servicePort: 3000
